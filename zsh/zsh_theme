# vim: fdm=marker

export CMD_NOTIFY_THRESHOLD=100
# {{{
IGNORED_LONG_CMD+=(
    anon-ssh
    bat
    cat
    diary
    docker
    fg
    less
    khal
    man
    neomutt
    nvim
    pdiary
    pwiki
    ssh
    sshpass
    sudoedit
    tail
    tmux
    vi
    vim
    wdiary
    wiki
    wwiki
    zn
    zs
    zz
)
typeset -U IGNORED_LONG_CMD
# }}}

# bat THEME {{{
export BAT_THEME="gruvbox-dark"
# }}}

# join devices {{{
JOIN_DEVICES=${JOIN_DEVICES:=Tab S6}
export JOIN_DEVICES
alias join-silence='export JOIN_DEVICES='
join-phone() {
    if [[ $JOIN_DEVICES != 'S21' ]]; then
        JOIN_DEVICES="${JOIN_DEVICES},S21"
    fi
    export JOIN_DEVICES
}
join-tablet() {
    if [[ $JOIN_DEVICES != 'Tab S6' ]]; then
        JOIN_DEVICES="${JOIN_DEVICES},Tab S6"
    fi
    export JOIN_DEVICES
}
# }}}

# THEME --------------------------------{{{
source $dots/zsh/theme_vars

in-virtualenv() { #{{{
    if [[ -n $VIRTUAL_ENV ]]; then
        local venv
        venv=${${(s:/:)VIRTUAL_ENV}[-1]}
        if [[ $venv == 'env' ]]; then
            venv=${${(s:/:)VIRTUAL_ENV}[-2]}
        fi
        echo -n "${ZSH_THEME_PREFIX}${ZSH_THEME_REPO_COLOR}$ZSH_THEME_SEPARATOR%{$FG[027]%}${venv}%{$reset_color%}$ZSH_THEME_SUFFIX"
    fi
} #}}}
aws-profile() { #{{{
    if [[ -n $AWS_PROFILE ]]; then
        echo -n "${ZSH_THEME_PREFIX}${ZSH_THEME_REPO_COLOR}$ZSH_THEME_SEPARATOR%{$FG[214]%}${AWS_PROFILE}%{$reset_color%}$ZSH_THEME_SUFFIX"
    fi
} #}}}
nvm-version() { #{{{
    if [[ -n $NVM_BIN ]]; then
        local nvm_ver
        nvm_ver=${${(s:/:)NVM_BIN}[-2]}
        echo -n "${ZSH_THEME_PREFIX}${ZSH_THEME_REPO_COLOR}$ZSH_THEME_SEPARATOR%{$FG[112]%}$nvm_ver%{$reset_color%}$ZSH_THEME_SUFFIX"
    fi
}
#}}}
# Setup vim mode and rprompt {{{
RPROMPT_CMDS=( aws-profile in-virtualenv nvm-version )
function zle-line-init zle-keymap-select {
    case $CONTEXT {
        ('start')
            VIM_PROMPT="$prompt_l_sqparen%b%F{yellow}NORMAL$prompt_r_sqparen"
            local_prompt="${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/}"
            if (( ${+RPROMPT_CMDS} )); then
                for cmd in $RPROMPT_CMDS; do
                    local_prompt+="$($cmd)"
                done
            fi
            RPROMPT="$local_prompt$(git_super_status)"
            zle reset-prompt
            ;;
        ('cont')
            ;;
        ('select')
            ;;
        ('vared')
            ;;
        }
}

zle -N zle-line-init
zle -N zle-keymap-select
export KEYTIMEOUT=100
bindkey -v
#}}}
#prompt {{{
prompt_adam2_setup () { #{{{
    # Some can't be local
    local prompt_gfx_tlc prompt_gfx_blc

    prompt_start=$'%{\e(0%}'
    prompt_end=$'%{\e(B%}'
    prompt_gfx_tlc=$prompt_start┌$prompt_end
    prompt_gfx_blc=$prompt_start└$prompt_end
    prompt_gfx_hyphen=─
    local phyph=$prompt_start$prompt_gfx_hyphen$prompt_end


    case $HOST in #hyphens
        (*edwarde*)
            prompt_adam2_color1=${1:-'blue'};; # blue
        (*[Mm]use*)
            prompt_adam2_color1=${1:-'green'};; # green
        (*EEVANS*)
            prompt_adam2_color1=${1:-'yellow'};;
        (localhost)
            prompt_adam2_color1=${1:-'magenta'};;
        (raspberrypi|black-pearl)
            prompt_adam2_color1=${1:-'198'};; # pink
        (*)
            prompt_adam2_color1=${1:-'154'};; # lime
    esac
    # Colour scheme
    prompt_adam2_color2=${2:-'green'}   # current directory
    prompt_adam2_color3=${3:-'cyan'}    # user@host
    prompt_adam2_color4=${4:-'12'}   # user input

    local prompt_gfx_bbox
    prompt_gfx_tbox="%B%F{$prompt_adam2_color1}${prompt_gfx_tlc}%b%F{$prompt_adam2_color1}${phyph}"
    prompt_gfx_bbox="%B%F{$prompt_adam2_color1}${prompt_gfx_blc}%b%F{$prompt_adam2_color1}${phyph}"

    # This is a cute hack.  Well I like it, anyway.

    prompt_l_paren="%B%F{246}("
    prompt_r_paren="%B%F{246})"
    prompt_l_sqparen="%B%F{246}["
    prompt_r_sqparen="%B%F{246}]"

    prompt_user_host="%b%F{$prompt_adam2_color3}%n%B%F{$prompt_adam2_color3}@%b%F{$prompt_adam2_color3}%m"
    prompt_shell_level="%b%F{yellow}l:$SHLVL%B%F{246}"
    prompt_jobs="%b%F{yellow}j:%j%B%F{246}"

    prompt_line_1a="$prompt_gfx_tbox$prompt_l_paren%B%F{$prompt_adam2_color2}%~$prompt_r_paren%b%F{$prompt_adam2_color1}"
    prompt_line_1b="%B%F{246}[%b%F{yellow}%D{%H:%M}%B%F{246}|$prompt_user_host%B%F{246}|$prompt_shell_level $prompt_jobs]%b%F{$prompt_adam2_color1}${phyph}"

    prompt_line_2="$prompt_gfx_bbox$prompt_l_sqparen%b%F{12}%?$prompt_r_sqparen%b%F{$prompt_adam2_color1}${phyph}%b%F{12}"

    prompt_char="%(!.#.>)"

    prompt_opts=(cr subst percent)

} #}}}
before_command() { #{{{
    EXIT_CODE=$?
    if ! [[ -z $CMD_START_DATE ]]; then
        # The idea for this comes from https://glasnt.com/blog/on-audible-notification-of-long-running-commands
        CMD_END_DATE=$(date +%s)
        # altered from https://stackoverflow.com/questions/5203665/zsh-check-if-string-is-in-array
        if ! [[ $IGNORED_LONG_CMD[(r)${CMD_ARRAY[1]}] ]]; then  # See zshparam:Subscript Flags
            CMD_ELAPSED_TIME=$(($CMD_END_DATE - $CMD_START_DATE))
            unset CMD_START_DATE
            if [[ $CMD_ELAPSED_TIME -gt $CMD_NOTIFY_THRESHOLD ]]; then

                RES=$(python -c "diff = $CMD_ELAPSED_TIME; min = int(diff / 60); sec = (diff - min*60); print('%s min, %0.1f sec' %(min,sec))")
                if [[ $EXIT_CODE == 0 ]]; then
                    result="${CMD_ARRAY[1]} completed. $RES"
                else
                    result="${CMD_ARRAY[1]} failed. $RES. Exit code, $EXIT_CODE."
                fi
                echo -e "\n⏰  $result" >&2
                (
                    if [[ $TERM == tmux* ]]; then
                        printf "\033Ptmux;\033"
                    fi
                    printf "\033]1337;Custom=id=%s:%s\a" "longrun" "$result"
                    if [[ $TERM == tmux* ]]; then
                        printf "\033\\"
                    fi

                    if whence espeak&> /dev/null; then
                        espeak -s 600 $result &
                    fi

                    if [[ -n $JOIN_KEY ]]; then
                        curl -G \
                            --data-urlencode "deviceNames=$JOIN_DEVICES" \
                            --data-urlencode "text=$result" \
                            --data-urlencode "title=Command Finished" \
                            --data-urlencode "apikey=$JOIN_KEY"  \
                            --data-urlencode "group=CommandFinished/$(hostname)" \
                            "https://joinjoaomgcd.appspot.com/_ah/api/messaging/v1/sendPush" \
                            &> /dev/null &
                    fi
                )
            fi
        fi
    fi
    local prompt_line_1

    prompt_adam2_choose_prompt

    print -rP "$prompt_line_1"
    PS1="$prompt_line_2%b%F{12}$prompt_char %b%f%k"
    PS2="$prompt_line_2$prompt_gfx_bbox_to_mbox%b%F{12}%_> %b%f%k"
    PS3="$prompt_line_2$prompt_gfx_bbox_to_mbox%b%F{12}?# %b%f%k"

    zle_highlight[(r)default:*]="default:fg=$prompt_adam2_color4"
}

autoload -Uz add-zsh-hook
add-zsh-hook precmd before_command

#}}}

# Use OMZL termsupport re-do for my custom tmux-256color {{{
function title {
  setopt localoptions nopromptsubst

  # Don't set the title if inside emacs, unless using vterm
  [[ -n "${INSIDE_EMACS:-}" && "$INSIDE_EMACS" != vterm ]] && return

  # if $2 is unset use $1 as default
  # if it is set and empty, leave it as is
  : ${2=$1}

  case "$TERM" in
    cygwin|xterm*|putty*|rxvt*|konsole*|ansi|mlterm*|alacritty|st*|foot)
      print -Pn "\e]2;${2:q}\a" # set window name
      print -Pn "\e]1;${1:q}\a" # set tab name
      ;;
    screen*)
      print -Pn "\ek${1:q}\e\\" # set screen hardstatus
      ;;
    *)
      if [[ "$TERM_PROGRAM" == "iTerm.app" ]]; then
        print -Pn "\e]2;${2:q}\a" # set window name
        print -Pn "\e]1;${1:q}\a" # set tab name
      else
        # Try to use terminfo to set the title if the feature is available
        if (( ${+terminfo[fsl]} && ${+terminfo[tsl]} )); then
          print -Pn "${terminfo[tsl]}$1${terminfo[fsl]}"
        fi
      fi
      ;;
  esac
}
#}}}

prompt_adam2_choose_prompt () { #{{{
    local prompt_line_1a_width=${#${(S%%)prompt_line_1a//(\%([KF1]|)\{*\}|\%[Bbkf])}}
    local prompt_line_1b_width=${#${(S%%)prompt_line_1b//(\%([KF1]|)\{*\}|\%[Bbkf])}}

    local prompt_padding_size=$(( COLUMNS
    - prompt_line_1a_width
    - prompt_line_1b_width ))

    # Try to fit in long path and user@host.
    if (( prompt_padding_size > 0 )); then
        local prompt_padding
        eval "prompt_padding=\${(l:${prompt_padding_size}::${prompt_gfx_hyphen}:)_empty_zz}"
        prompt_line_1="$prompt_line_1a$prompt_start$prompt_padding$prompt_end$prompt_line_1b"
        return
    fi

    prompt_padding_size=$(( COLUMNS - prompt_line_1a_width ))

    # Didn't fit; try to fit in just long path.
    if (( prompt_padding_size > 0 )); then
        local prompt_padding
        eval "prompt_padding=\${(l:${prompt_padding_size}::${prompt_gfx_hyphen}:)_empty_zz}"
        prompt_line_1="$prompt_line_1a$prompt_start$prompt_padding$prompt_end"
        return
    fi

    # Still didn't fit; truncate
    local prompt_pwd_size=$(( COLUMNS - 5 ))
    prompt_line_1="$prompt_gfx_tbox$prompt_l_paren%B%F{$prompt_adam2_color2}%$prompt_pwd_size<...<%~%<<$prompt_r_paren%b%F{$prompt_adam2_color1}$prompt_start$prompt_gfx_hyphen$prompt_end"
} #}}}
before_execute() { #{{{
    print -Pn "%B%F{}Start %D{%H:%M:%S}\n%b%f%k"
    CMD_NAME=$1
    echo $1 | read -A CMD_ARRAY
    CMD_START_DATE=$(date +%s)
}

autoload -Uz add-zsh-hook
add-zsh-hook preexec before_execute

#}}}


prompt_adam2_setup
autoload -Uz promptinit; promptinit
#}}}
#}}}
