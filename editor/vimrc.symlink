"
" File: .vimrc
" Author: Edward Evans
"
" Preamble -----------------------{{{
set nocompatible    " It's VIM, not VI
" Install vim-plug if we don't already have it {{{
if empty(glob("~/.vim/autoload/plug.vim"))
    " Ensure all needed directories exist  (Thanks @kapadiamush)
    execute '!mkdir -p ~/.vim/plugged'
    execute '!mkdir -p ~/.vim/autoload'
    " Download the actual plugin manager
    execute '!curl -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif
" }}}
" vim-polyglot {{{
let g:polyglot_disabled = ['markdown','sh']
" }}}
" ALE + coc.nvim {{{
let g:ale_disable_lsp = 1
" }}}
call plug#begin('~/dots/editor/vim.symlink/bundle/')
" Plugin listing {{{
    " Pretty {{{
        " colorscheme
        Plug 'nanotech/jellybeans.vim'
        Plug 'crusoexia/vim-monokai'
        Plug 'ellisonleao/gruvbox.nvim'
        " the pretty at the bottom of the buffer
        Plug 'itchyny/lightline.vim'
        " For presentations
        Plug 'NLKNguyen/papercolor-theme'
        Plug 'altercation/vim-colors-solarized'
        " See indentation as highlights
        Plug 'nathanaelkane/vim-indent-guides'
    " }}}
    " Languages {{{
        Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
        " Get highlight of nested functions
        Plug 'atusy/tsnode-marker.nvim'
        Plug 'neoclide/coc.nvim', {'branch': 'release'}
        Plug 'sheerun/vim-polyglot'
        " Python magic {{{
            Plug 'tmhedberg/SimpylFold'
            " Make the python indenting actually work
            Plug 'hynek/vim-python-pep8-indent'
        " }}}
        " Work with VimL {{{
            Plug 'ynkdir/vim-vimlparser'
            Plug 'dbakker/vim-lint'
        " }}}
        Plug 'pearofducks/ansible-vim'
        Plug 'chrisbra/csv.vim'
        Plug 'NLKNguyen/c-syntax.vim'
        Plug 'freitass/todo.txt-vim'
        " restructured text
        Plug 'gu-fan/riv.vim'
        Plug 'crazy-canux/icinga2.vim'
        Plug 'tpope/vim-markdown'
        Plug 'Glench/Vim-Jinja2-Syntax'
    " }}}
    " Util {{{
        " local wiki {{{
        Plug 'michal-h21/vim-zettel'
        Plug 'mattn/calendar-vim'
        Plug 'vim-voom/VOoM'
        " }}}
        Plug 'direnv/direnv.vim'
        " file browser
        Plug 'tpope/vim-vinegar'
        " get the output of shell commands in a new split buffer
        Plug 'phodge/vim-shell-command'
        " browse the undotree easily
        Plug 'mbbill/undotree'
        " A better surround plugin
        Plug 'machakann/vim-sandwich'
        " mappings
        Plug 'tpope/vim-unimpaired'
        " repeat macros with .
        Plug 'tpope/vim-repeat'
        " syntax checking
        Plug 'dense-analysis/ale'
        " Get the differnces between line ranges
        Plug 'AndrewRadev/linediff.vim'
        " use ag in vim like :grep
        Plug 'mileszs/ack.vim'
        " and completion
        "Plug 'Valloric/YouCompleteMe'
        " comment toggle
        Plug 'scrooloose/nerdcommenter'
        " easily align things
        Plug 'godlygeek/tabular'
        " navigate tmux splits
        Plug 'christoomey/vim-tmux-navigator'
        " Get focus events when running in tmux
        Plug 'tmux-plugins/vim-tmux-focus-events'
        " Session management (mostly for making tmux continuum behave better)
        Plug 'tpope/vim-obsession'
        Plug 'bkad/CamelCaseMotion'
        " Snippets
        Plug 'SirVer/ultisnips'
        " swap arbitrary windows in a layout
        Plug 'wesQ3/vim-windowswap'
        " Rainbows for all the brackets, makes it easier to see mismatches
        Plug 'luochen1990/rainbow'
        " respect .editorconfig
        Plug 'editorconfig/editorconfig-vim'
        " Enable fuzzy-finder
        Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
        Plug 'junegunn/fzf.vim'
    " }}}
    " Slow Plugs {{{
        " Git integration
        Plug 'tpope/vim-git' " Syntax etc for git
        Plug 'tpope/vim-fugitive' " :Git comands
        " Mecurial Integration
        Plug 'ludovicchabant/vim-lawrencium'
        " indicate changed lines from repo in gutter
        Plug 'mhinz/vim-signify'
    "}}}
    " Out of tree {{{
    " }}}
    " Testing Plugs {{{
    " }}}
"}}}
call plug#end()

"}}}
" Basic Config Settings ----------{{{
set title                       " set the title of the terminal window
let &titlestring = 'VIM (%f) %t' " For Talon filetype detection
set laststatus=2                " always show the statusline
set t_Co=256
if !has('nvim')
    set encoding=utf-8
    scriptencoding utf-8
endif
set splitbelow                  " new splits at bottom
set splitright                  " new splits at right
set mouse=a
set fillchars+=vert:█
set backspace=2                 " backspace over everything
set selectmode=                 " don't use select mode
set cmdheight=2                 " show lots of space for the commandline
set showcmd                     " show incomplete commands
set history=1000                " lots of command history
set lazyredraw                  " don't redraw the screen when executing macros
set matchtime=3                 " faster bracket matching
set timeoutlen=500
set ttimeoutlen=0               " give me time to complete mappings
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
set foldlevelstart=99
if exists('+relativenumber')
    set relativenumber
endif
set number
set numberwidth=1
set cursorline                  " highlight the current line
set wildmode=longest:full       " make cmdline tab completion similar to bash
set wildmenu                    " enable ctrl-n and ctrl-p to scroll thru matches
set wildignore+=*.o,*.obj,*~    " stuff to ignore when tab completing
set wildignore+=.\s+
set scrolloff=5					" keep this number of lines on the screen when scrolling vertically
set colorcolumn=80,100
let maplocalleader='|'
set suffixes+=.pyc,.pyo
set suffixes+=.class
" printing {{{
set printencoding=utf-8
set printfont=Liberation\ Mono\ for\ Powerline
"}}}
"Not used as I have lightline
"set ruler                                              " display cursor position
set rulerformat=%55(%{strftime('%a\ %b\ %e\ %I:%M\ %p')}\ %5l,%-6(%c%V%)\ %P%)
"}}}
" Formatting options -------------{{{
set nolist                                              " show spacer characters
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮,trail:· " set the spacing characters
set linebreak                                           " wrap lines at &breakat when nolist
" leader for linebreak lines
set showbreak=↳
if exists('&breakindent')
    set breakindent
    set breakindentopt=shift:2
endif
set smarttab
set expandtab
set softtabstop=4
set shiftwidth=4
set tabstop=4
set wrap
set formatoptions+=q                                    " format comments
set formatoptions+=r                                    " insert comment header after enter in insert
set formatoptions+=n                                    " recognize numbered lists
set formatoptions+=1                                    " Don't break a line on a 1 letter word, rather break before it
set formatoptions+=l                                    " long lines in insert mode are not broken
set formatoptions+=j                                    " when joining comment lines, remove comment leader
"}}}
" Spelling Settings --------------{{{
set dictionary=/usr/dict/words
set spelllang=en_au
set nospell
set spellfile=~/.vimspell.add,~/dots/editor/vim.symlink/spell/en.utf-8.add
"}}}
" Quick Editing ------------------{{{

nnoremap <leader>ev :tabedit ~/dots/editor/vimrc.symlink<cr>
nnoremap <leader>sv :source ~/dots/editor/vimrc.symlink<cr>
augroup MY_VIMRC
    au!
    au BufWritePost .vimrc,vimrc.symlink source %
augroup END
nnoremap <leader>et :tabedit ~/dots/todo.symlink/todo/todo.txt<cr>
nnoremap <leader>ez :tabedit ~/dots/zsh/zshrc.symlink<cr>
nnoremap <leader>es :tabedit ~/dots/editor/vim.symlink/spell/en.utf-8.add<cr>:vsplit ~/.vimspell.add<cr>

"}}}
" Backup Settings ----------------{{{
set backup                                            " enable backups
if has('persistent_undo')
    set undodir=~/.vim/tmp/undo//                         " undo files
    if !isdirectory(expand(&undodir))
        call mkdir(expand(&undodir), "p")
    endif
    set undofile
endif
set backupdir=~/.vim/tmp/backup//                     " backups
set directory=~/.vim/tmp/swap//                       " swap files
"let g:yankring_history_dir='~/.vim/tmp/yankring'

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), 'p')
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), 'p')
endif
"}}}
" Search Settings ----------------{{{

nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <silent> <leader><space> :noh<cr>:call clearmatches()<cr>:IndentGuidesEnable<cr>

" Open a Quickfix window for the last search.
nnoremap <silent> <leader>/ :execute 'vimgrep /'.@/.'/gj %'<CR>:copen<CR>

" Ack for the last search.
nnoremap <silent> <leader>? :AckFromSearch!<CR>

"}}}
" Filetype Specific --------------{{{
" Spell-lists {{{
augroup PERSONAL_SPELL_FILES
    au!
    au BufWritePost ~/dots/editor/vim.symlink/spell/en.utf-8.add,~/.vimspell.add silent mkspell! %
augroup END
" }}}
" ANSIBLE {{{
let g:ansible_extra_keywords_highlight = 1
let g:ansible_name_highlight = 'b'
"let g:ansible_extra_syntaxes = 'json.vim'
augroup PERSONAL_ANSIBLE
    au!
    au BufNewFile,BufRead *ansible/*.yml setlocal filetype=yaml.ansible
    au FileType yaml.ansible setlocal shiftwidth=2
    au FileType yaml.ansible setlocal tabstop=2
    au FileType yaml.ansible setlocal softtabstop=2
    au FileType yaml.ansible setlocal shiftround
    au FileType yaml.ansible setlocal expandtab
    au FileType yaml.ansible setlocal autoindent
    au FileType yaml.ansible setlocal foldmethod=indent
augroup END
" }}}
" chef {{{
augroup PERSONAL_CHEF
    au!
    au FileType ruby,eruby setlocal filetype=ruby.eruby.chef
    au FileType ruby,eruby,ruby.eruby.chef setlocal shiftwidth=2
    au FileType ruby,eruby,ruby.eruby.chef setlocal tabstop=2
    au FileType ruby,eruby,ruby.eruby.chef setlocal softtabstop=2
    au FileType ruby,eruby,ruby.eruby.chef setlocal shiftround
    au FileType ruby,eruby,ruby.eruby.chef setlocal expandtab
    au FileType ruby,eruby,ruby.eruby.chef setlocal autoindent
augroup END
" }}}
" crontab {{{
augroup crontab
    au!
    au FileType crontab setlocal nobackup nowritebackup
augroup END
" }}}
" Git {{{
"Spellcheck when writing git logs
augroup PERSONAL_GIT
    au!
    autocmd FileType gitcommit setlocal spell
augroup END
" }}}
" Groovy {{{
augroup PERSONAL_GROOVY
    au!
    autocmd FileType groovy set shiftwidth=2
    autocmd FileType groovy set softtabstop=2
    autocmd FileType groovy set tabstop=2
augroup END

" }}}
" Java {{{
augroup PERSONAL_JAVA
    au!
    au FileType java setlocal shiftwidth=4
    au FileType java setlocal cinoptions+=j1
    au FileType java let java_highlight_all=1
    au FileType java let java_comment_strings=1
    au FileType java let java_highlight_java_lang_ids=1
    au FileType java let java_highlight_functions="style"
    au BufEnter,BufRead *.java syntax sync fromstart
augroup END
" }}}
" javascript {{{
augroup PERSONAL_JAVASCRIPT
    au!
    au FileType javascript setlocal noexpandtab
augroup END
" }}}
" typescript {{{
augroup PERSONAL_TYPESCRIPT
    au!
    au FileType typescript setlocal shiftwidth=2
    au FileType typescript setlocal tabstop=2
    au FileType typescript setlocal softtabstop=2
    au FileType typescript setlocal shiftround
    au FileType typescript setlocal expandtab
    au FileType typescript setlocal autoindent
augroup END

" }}}
" typescriptreact {{{
augroup PERSONAL_TYPESCRIPT
    au!
    au FileType typescriptreact setlocal shiftwidth=2
    au FileType typescriptreact setlocal tabstop=2
    au FileType typescriptreact setlocal softtabstop=2
    au FileType typescriptreact setlocal shiftround
    au FileType typescriptreact setlocal expandtab
    au FileType typescriptreact setlocal autoindent
augroup END

" }}}
" JSON {{{
augroup PERSONAL_JSON
    au!
    au FileType json setlocal shiftwidth=2
    au FileType json setlocal tabstop=2
    au FileType json setlocal softtabstop=2
    au FileType json setlocal shiftround
    au FileType json setlocal expandtab
    au FileType json setlocal autoindent
    au filetype json setlocal foldmethod=indent
augroup END
" }}}
" Python {{{
let g:python_highlight_all = 1
augroup PERSONAL_PYTHON
    au!
    au BufReadCmd *.whl call zip#Browse(expand("<amatch>")) " open python wheels like zip files
    au Filetype python setlocal textwidth=79  " lines longer than 79 columns will be broken
    au Filetype python setlocal shiftwidth=4  " operation >> indents 4 columns; << unindents 4 columns
    au Filetype python setlocal tabstop=4     " a hard TAB displays as 4 columns
    au Filetype python setlocal expandtab     " insert spaces when hitting TABs
    au Filetype python setlocal softtabstop=4 " insert/delete 4 spaces when hitting a TAB/BACKSPACE
    au Filetype python setlocal shiftround    " round indent to multiple of 'shiftwidth'
    au Filetype python setlocal autoindent    " align the new line indent with the previous line
    au Filetype python setlocal foldmethod=expr " actually use SimpylFold
augroup END
" }}}
" rst {{{
augroup reStructured
    au!
    au Filetype rst setlocal softtabstop=3
    au Filetype rst setlocal shiftwidth=3
    au Filetype rst setlocal tabstop=3
    au Filetype rst setlocal spell
    if has('nvim')
        au Filetype rst command! -buffer Preview call jobstart(['restview', '--css=/Users/eevans43/src/rhythm.css/dist/css/rhythm.css', '--css=/Users/eevans43/src/rhythm.css/syntax/molokai.css', expand('%:p')])
    endif
augroup END
" }}}
" terminal {{{
if has('nvim')
    augroup PERSONAL_TERMINAL
        au!
        au TermOpen term://* setlocal colorcolumn=
        au TermOpen term://* setlocal nonumber
        au TermOpen term://* IndentGuidesDisable
        au TermOpen term://* startinsert
    augroup END
endif
" }}}
" tex {{{
augroup TEX
    au!
    au FileType tex setlocal tw=79
augroup END
" }}}
" sh {{{
" Fold functions, heredoc and if/do/for
let g:sh_fold_enabled= 7
" }}}
" vim-shell-command {{{
augroup PERSONAL_SHELL_COMMAND
    au!
    au FileType shell-command setlocal colorcolumn=
augroup END
" }}}
" Vim {{{
augroup PERSONAL_VIM
    au!
    au FileType vim setlocal foldmethod=marker
    au FileType vim setlocal iskeyword+=:
augroup END
" }}}
" YAML {{{
augroup PERSONAL_YAML
    au!
    au FileType yaml setlocal shiftwidth=2
    au FileType yaml setlocal tabstop=2
    au FileType yaml setlocal softtabstop=2
    au FileType yaml setlocal shiftround
    au FileType yaml setlocal expandtab
    au FileType yaml setlocal autoindent
    au FileType yaml setlocal foldmethod=indent
augroup END
" }}}
" Help {{{
augroup PERSONAL_HELP
    au!
    au FileType help IndentGuidesDisable
augroup END
" }}}
" Markdown {{{
let g:markdown_folding = 1
let g:markdown_syntax_conceal = 0
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
" }}}
" mail {{{
augroup PERSONAL_MAIL
    au!
    au FileType mail setlocal spell
augroup END
" }}}
"}}}
" Folding ------------------------{{{
" "Focus" the current line.{{{
"  Basically
"
" 1. Close all folds.
" 2. Open just the folds containing the current line.
" 3. Move the line to a little bit (15 lines) above the center of the screen.
" 4. Pulse the cursor line.  My eyes are bad.
"
" This mapping wipes out the z mark, which I never use.
"
" I use :sus for the rare times I want to actually background Vim.
" }}}
nnoremap <c-z> mzzMzvzz15<c-e>`z
nnoremap <space> za
set foldtext=FoldText()
" fold function FoldText {{{
function! FoldText()
    let l:lpadding = &fdc
    redir => l:signs
    execute 'silent sign place buffer='.bufnr('%')
    redir End
    let l:lpadding += l:signs =~? 'id=' ? 2 : 0

    if exists('+relativenumber')
        if (&number)
            let l:lpadding += max([&numberwidth, strlen(line('$'))]) + 1
        elseif (&relativenumber)
            " change to 3 as rare to have more than 99 lines on the screen
            let l:lpadding += max([&numberwidth, 3])
        endif
    else
        if (&number)
            let l:lpadding += max([&numberwidth, strlen(line('$'))]) + 1
        endif
    endif

    " expand tabs
    let l:start = substitute(getline(v:foldstart), '\t', repeat(' ', &tabstop), 'g')
    let l:end = substitute(substitute(getline(v:foldend), '\t', repeat(' ', &tabstop), 'g'), '^\s*', '', 'g')

    let l:info = ' (' . (v:foldend - v:foldstart) . ')'
    let l:infolen = strlen(substitute(l:info, '.', 'x', 'g'))
    let l:width = winwidth(0) - l:lpadding - l:infolen

    let l:separator = ' … '
    let l:separatorlen = strlen(substitute(l:separator, '.', 'x', 'g'))
    let l:end = strpart(l:end , 0, l:width - strlen(substitute(l:start, '.', 'x', 'g')) - l:separatorlen)
    let l:text = l:start . ' … ' . l:end

    return l:text . repeat(' ', l:width - strlen(substitute(l:text, '.', 'x', 'g'))) . l:info
endfunction " }}}
"}}}
" Functions ----------------------{{{
" Only show cursorline in the current window and in normal mode.{{{
augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END
"}}}
" Make sure Vim returns to the same line when you reopen a file. {{{
augroup line_return
    au!
    au BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \ execute 'normal! g`"zvzz' |
                \ endif
augroup END
"}}}
" Highlight end of line whitespace{{{
highlight EOLWS ctermbg=red guibg=red
augroup PERSONAL_WHITESPACE
    au!
    autocmd InsertEnter * syn clear EOLWS | syn match EOLWS excludenl /\s\+\%#\@!$/
    autocmd InsertLeave * syn clear EOLWS | syn match EOLWS excludenl /\s\+$/
augroup END
"}}}
" TODO etc Tags {{{
" Highlight all tags
if has('autocmd')
    " Highlight TODO, FIXME, NOTE, etc.
    if v:version > 701
        augroup PERSONAL_TODO_HIGHLIGHT
            au!
            autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|XXX\|BUG\|HACK\):')
            autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\|INFO\|IDEA\):')
        augroup END
    endif
endif

"}}}
" Resize splits when the window is resized {{{
augroup PERSONAL_RESIZE
    au!
    au VimResized * :wincmd =
augroup END
"}}}
" Get the name of the current tmux session {{{
function! TmuxSessionName() "{{{
    if (exists("$TMUX"))
        return system('tmux display-message -p "#S"')
    endif
    return ''
endfunction "}}}
" }}}
"}}}
" Mappings -----------------------{{{
" Double esc in term to get to normal mode {{{
if has('nvim')
    tnoremap <Esc><Esc> <C-\><C-n>
endif
"}}}
" Moving blocks{{{
vnoremap < <gv
vnoremap > >gv
"}}}
" make Y work more like D and C
nnoremap Y y$
" move up and down screen lines rather than file lines{{{
nnoremap j gj
nnoremap k gk
noremap gj j
noremap gk k
"}}}
" switch tick and inv comma as going back to actual position is far more useful {{{
noremap ` '
noremap ' `
" }}}
" dp and do automatically jump to the next change {{{
nnoremap <silent> dp dp]c
nnoremap <silent> do do]c
"}}}
" Source selection / line of vimscript {{{
vnoremap <leader>S y:execute @@<cr>:echo 'Sourced selection.'<cr>
nnoremap <leader>S ^vg_y:execute @@<cr>:echo 'Sourced line.'<cr>
"}}}
" Get all TODO tags in files above current directory {{{
noremap <Leader>to :Rg! '\b(TODO\|FIXME\|CHANGED\|XXX\|BUG\|HACK\|NOTE\|INFO\|IDEA)\b' <CR>
noremap <Leader>ti :Rg! \b(TODO\|FIXME\|CHANGED\|XXX\|BUG\|HACK\|NOTE\|INFO\|IDEA\) % <CR>
" }}}
" Select (charwise) the contents of the current line, excluding indentation.
" Great for pasting Python lines into REPLs.
nnoremap vv ^vg_
" Sudo to write
cabbr w!! w !sudo tee % >/dev/null
" Don't move on * {{{
" I'd use a function for this but Vim clobbers the last search when you're in
" a function so fuck it, practicality beats purity.
nnoremap <silent> * :let stay_star_view = winsaveview()<cr>*:call winrestview(stay_star_view)<cr>
"}}}
" Keep search matches in the middle of the window. {{{
nnoremap n nzzzv
nnoremap N Nzzzv
"}}}
" Same when jumping around {{{
nnoremap g; g;zz
nnoremap g, g,zz
nnoremap <c-o> <c-o>zz
" }}}
" Easier to type, and I never use the default behaviour. "{{{
noremap H ^
noremap L $
vnoremap L g_
"}}}
" List navigation {{{
nnoremap <left>  :cprev<cr>zvzz
nnoremap <right> :cnext<cr>zvzz
nnoremap <up>    :lprev<cr>zvzz
nnoremap <down>  :lnext<cr>zvzz
"}}}
"}}}
" Plugins ------------------------{{{
" NERDCommenter {{{
let g:NERDSpaceDelims=1
" }}}
" coc-nvim {{{
let g:coc_global_extensions = [
            \'coc-fzf-preview',
            \'coc-json',
            \'coc-pyright',
            \'coc-tsserver',
            \'coc-vimlsp',
            \'coc-yaml',
            \'coc-snippets',
            \]
let g:coc_filetype_map = {
        \ 'yaml.ansible': 'ansible',
    \}
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi :CocCommand fzf-preview.CocImplementations<CR>
nmap <silent> gr :CocCommand fzf-preview.CocReferences<CR>
" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Use <CR> to execute completion
if exists('*complete_info')
  inoremap <silent><expr> <C-e> coc#pum#visible() ? coc#pum#cancel() : "\<C-e>"

  inoremap <silent><expr> <TAB>
    \ coc#pum#visible() ? coc#_select_confirm() :
    \ coc#expandableOrJumpable() ?
    \ "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  let g:coc_snippet_next = '<tab>'
endif

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif
" }}}
" editorconfig {{{
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
" }}}
" vim-fzf {{{
nnoremap <c-p> :Files<cr>
" }}}
" ALE {{{
let g:ale_sign_column_always = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_info_str = 'I'
let g:ale_echo_msg_format = '[%linter%:%severity%%code%] %s'

let g:ale_python_mypy_options = '--silent-imports'
let g:ale_markdown_vale_options = '--config .vale.ini'

let g:ale_fixers = {
            \'python': [
                \'black',
                \'isort',
            \],
            \'typescript': [
                \'eslint',
            \],
        \}
let g:ale_fix_on_save = 1
" }}}
" ack.vim {{{
let g:ackhighlight=1
let g:ackprg = 'rg --vimgrep --smart-case'
" }}}
" netrw {{{
let g:netrw_liststyle=0 " get tree-style listing
" }}}
" riv.vim {{{
let g:riv_highlight_code='lua,python,cpp,javascript,vim,sh,java,xml,sql'
" }}}
" LatexBox {{{"
let g:LatexBox_build_dir='build'
"}}}
" UndoTree {{{
nnoremap <F2> :UndotreeToggle<CR>
"}}}
" rainbow {{{
let g:rainbow_active = 1
let g:rainbow_conf = {
\    'separately': {
\		'go': 0,
\	}
\}
"}}}
" Signify {{{"
let g:signify_vcs_list = [ 'git', 'hg' ]
"}}}
" vim-indent-guides {{{
let g:indent_guides_auto_colors = 1
let g:indent_guides_guide_size = 0
let g:indent_guides_start_level = 1
let g:indent_guides_autocmds_enabled = 1
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['shell-command', 'terminal', 'man']
" }}}
" dokumentary {{{
let g:dokumentary_docprgs = {'python': ''}
" }}}
" utilsnips {{{
let g:UltiSnipsExpandTrigger = '<M-Space>'
let g:UltiSnipsJumpForwardTrigger = '<c-b>'
let g:UltiSnipsJumpBackwardTrigger = '<c-k>'

let g:UltiSnipsEditSplit = 'context'
" }}}
" treesitter {{{
lua << ENDLUA
require'nvim-treesitter.configs'.setup {
    ensure_installed = { "lua", "vim", "help", "python", "bash" },
    sync_install = false,
    auto_install = true,
    highlight = {
        enable = true,
        additional_vim_regex_highlighting = true,
    },
    indent = {
        enable = true
    },
}
ENDLUA
" }}}
" tsnode-marker {{{
lua << ENDLUA
local function is_def(node)
    return vim.tbl_contains({
        "func_literal",
        "function_declaration",
        "function_definition",
        "method_declaration",
        "method_definition",
    }, node:type())
end



vim.api.nvim_create_autocmd("FileType", {
    group = vim.api.nvim_create_augroup("tsnode-marker-markdown", {}),
    pattern = "markdown",
    callback = function(ctx)
        require("tsnode-marker").set_automark(ctx.buf, {
            target = { "code_fence_content" }, -- list of target node types
            hl_group = "TabLineFill", -- highlight group
        })
    end,
})
vim.api.nvim_create_autocmd("FileType", {
    group = vim.api.nvim_create_augroup("tsnode-marker-nested-def", {}),
    pattern = { "lua", "python", "go" }, -- whatever languages you want
    callback = function(ctx)
        require("tsnode-marker").set_automark(ctx.buf, {
            hl_group = "TabLineFill", -- highlight group
            target = function(_, node)
                -- do not mark if the node does not satisfy is_def()
                if not is_def(node) then
                    return false
                end

                -- mark if there is an ancestor node which satisfies is_def()
                local parent = node:parent()
                while parent do
                    if is_def(parent) then
                        return true
                    end
                    parent = parent:parent()
                end
                return false
            end,
        })
    end,
})
ENDLUA
" }}}
" CamelCaseMotion {{{
call camelcasemotion#CreateMotionMappings('<localleader>')
" }}}
" vim-go {{{
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1
" }}}
" vim-python-pep8-indent {{{
let g:python_pep_8_indent_max_back_search = 500
"}}}
" vim-tmux-navigator {{{
" Disable tmux navigator when zooming the Vim pane
let g:tmux_navigator_disable_when_zoomed = 1
" }}}
" vimwiki {{{
nmap <leader>www <Plug>VimwikiIndex
nmap -- <Plug>VimwikiRemoveHeaderLevel
nmap <C-Left> <Plug>VimwikiDiaryPrevDay
nmap <C-Right> <Plug>VimwikiDiaryNextDay
let g:vimwiki_tag_format = {
            \'pre_mark': '[''"]\?#\( \|#\)\@!',
            \'sep': '>><<',
            \'post_mark': '[''" ]\?\|$'
            \}

let g:vimwiki_list = [
            \{
                \'path': '~/vaults/zettel',
                \'links_space_char': ' ',
                \'name': 'vault',
                \'ext': 'md',
                \'syntax': 'markdown',
                \'custom_wiki2html': '~/dots/bin.symlink/convert_vimwiki.py',
            \},
        \]
let g:vimwiki_folding='expr'
augroup PERSONAL_VIMWIKI
    au!
    au FileType vimwiki set foldmethod=expr
    au FileType vimwiki setlocal spell
    au FileType vimwiki setlocal formatoptions-=t
augroup END
let g:vimwiki_listsyms=' x'
" }}}
" vim-zettel {{{
let g:zettel_options = [{"front_matter": [
            \["tags", '"#inbox"'],
            \["type", "note"],
            \],
            \"template": "~/vaults/zettel/z_templates/zettel_template.md",
            \"disable_front_matter": 1,
            \}]
let g:zettel_format = "%title"
let g:zettel_fzf_command = "rg --column --line-number --ignore-case --no-heading --color=always "
" }}}
"}}}
" MiniPlugins --------------------{{{
" Highlight Word {{{
"
" This mini-plugin provides a few mappings for highlighting words temporarily.
"
" Sometimes you're looking at a hairy piece of code and would like a certain
" word or two to stand out temporarily.  You can search for it, but that only
" gives you one color of highlighting.  Now you can use <leader>N where N is
" a number from 1-6 to highlight the current word in a specific color.

function! HiInterestingWord(n) " {{{
    " Save our location.
    normal! mz

    " Yank the current word into the z register.
    normal! "zyiw

    " Calculate an arbitrary match ID.  Hopefully nothing else is using it.
    let mid = 86750 + a:n

    " Clear existing matches, but don't worry if they don't exist.
    silent! call matchdelete(mid)

    " Construct a literal pattern that has to match at boundaries.
    let pat = '\V\<' . escape(@z, '\') . '\>'

    " Actually match the words.
    call matchadd('InterestingWord' . a:n, pat, 1, mid)

    " Move back to our original location.
    normal! `z
endfunction " }}}

" Mappings {{{

nnoremap <silent> <leader>1 :call HiInterestingWord(1)<cr>
nnoremap <silent> <leader>2 :call HiInterestingWord(2)<cr>
nnoremap <silent> <leader>3 :call HiInterestingWord(3)<cr>
nnoremap <silent> <leader>4 :call HiInterestingWord(4)<cr>
nnoremap <silent> <leader>5 :call HiInterestingWord(5)<cr>
nnoremap <silent> <leader>6 :call HiInterestingWord(6)<cr>

" }}}

" }}}
" Jumping to tags. {{{
"
" Basically, <c-]> jumps to tags (like normal) and <c-\> opens the tag in a new
" split instead.
"
" Both of them will align the destination line to the upper middle part of the
" screen.  Both will pulse the cursor line so you can see where the hell you
" are.  <c-\> will also fold everything in the buffer and then unfold just
" enough for you to see the destination line.
function! JumpToTag()
    execute "normal! \<c-]>mzzvzz15\<c-e>"
    execute 'keepjumps normal! `z'
    Pulse
endfunction
function! JumpBackTag(count)
    execute a:count "normal!\<c-t>mzzvzz15\<c-e>"
    execute 'keepjumps normal! `z'
    Pulse
endfunction
function! JumpToTagInSplit()
    execute "normal! \<c-w>v\<c-]>mzzMzvzz15\<c-e>"
    execute 'keepjumps normal! `z'
    Pulse
endfunction
nnoremap <silent><c-]> :silent! call JumpToTag()<cr>
nnoremap <c-t> :call JumpBackTag(v:count1)<cr>
nnoremap <silent><c-\> :silent! call JumpToTagInSplit()<cr>
"}}}
" Pulse Line {{{
function! s:Pulse() " {{{
    redir => old_hi
    silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    let steps = 4
    let width = 1
    let start = width
    let end = steps * width
    let color = 233

    for i in range(start, end, width)
        execute 'hi CursorLine ctermbg=' . (color + i)
        redraw
        sleep 6m
    endfor
    for i in range(end, start, -1 * width)
        execute 'hi CursorLine ctermbg=' . (color + i)
        redraw
        sleep 6m
    endfor

    execute 'hi ' . old_hi
endfunction " }}}
command! -nargs=0 Pulse call s:Pulse()
"}}}
" ToggleBackground
if exists("*ToggleBackground") == 0
    function ToggleBackground()
        if &background == "dark"
            set background=light
        else
            set background=dark
        endif
    call InterestingWordHighlights()
    call ALEHighlightColors()
    endfunction
    command BG call ToggleBackground()
endif
"}}}
" GUI Settings -------------------{{{
set guifont=Liberation\ Mono\ for\ Powerline\ 8
" no right hand scrollbar
set guioptions-=r
set guioptions-=R
" no left hand scrollbar
set guioptions-=l
set guioptions-=L
" no toolbar
set guioptions-=T
" autoselect into @+
set guioptions+=P
set guioptions+=A
" console for simple choices rather than dialogue
set guioptions+=c
" have a menubar
set guioptions+=m
"}}}
" Lightline -------------{{{

let g:lightline = {
    \     'colorscheme': 'jellybeans',
    \     'active': {
    \         'left': [
    \             [ 'mode', 'paste' ],
    \             [ 'gitbranch', 'readonly', 'relativepath', 'modified' ]
    \         ],
    \         'right': [
    \             [ 'lineinfo' ],
    \             [ 'percent' ],
    \             [ 'fileencoding', 'filetype' ],
    \             [ 'treesitter' ]
    \         ]
    \     },
    \	'inactive': {
    \       'left': [
    \           [ 'relativepath' ]
    \        ],
    \       'right': [
    \            [ 'lineinfo' ],
    \            [ 'percent' ]
    \        ]
    \     },
    \     'component_function': {
    \         'gitbranch': 'FugitiveHead',
    \         'treesitter': 'nvim_treesitter#statusline'
    \     },
    \     'mode_map': {
    \          'n' : 'N',
    \          'i' : 'I',
    \          'R' : 'R',
    \          'v' : 'V',
    \          'V' : 'VL',
    \          "\<C-v>": 'VB',
    \          'c' : 'C',
    \          's' : 'S',
    \          'S' : 'SL',
    \          "\<C-s>": 'SB',
    \          't': 'T',
    \      },
    \ }
"}}}
" Colours-------------------------{{{
set t_ZH=[3m
set t_ZR=[23m
if exists('&t_8f') && exists('&t_8b')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

if has('nvim')
    set termguicolors
endif
lua << ENDLUA
require("gruvbox").setup({
    undercurl = true,
    underline = true,
    bold = true,
    italic = true,
    strikethrough = true,
    invert_selection = false,
    invert_signs = false,
    invert_tabline = false,
    invert_intend_guides = false,
    inverse = true, -- invert background for search, diffs, statuslines and errors
    contrast = "", -- can be "hard", "soft" or empty string
    palette_overrides = {},
    overrides = {
        String = {italic=false},
        Operator = {italic=false},
    },
    dim_inactive = false,
    transparent_mode = false,
})
ENDLUA

colorscheme gruvbox
let g:airline_theme='base16_gruvbox_dark_medium'
if TmuxSessionName() =~? 'pair' || $ITERM_PROFILE == 'RemotePair'
    set background=dark
elseif  $ITERM_PROFILE =~? 'Hotkey Window Right'
    set background=dark
    hi Normal ctermbg=NONE guibg=NONE
elseif  $ITERM_PROFILE =~? 'Hotkey Window Left' || $ITERM_PROFILE =~? 'Personal' || TmuxSessionName() =~? 'personal'
    colorscheme solarized
    hi Normal ctermbg=NONE guibg=NONE
else
    if $MACOS_MODE == 'dark' || $MACOS_MODE == ''
        set background=dark
    else
        set background=light
    endif
endif
"colorscheme despacio
highlight WhitespaceEOL ctermbg=DarkYellow guibg=DarkYellow
" Interesting Word Default Highlights {{{

function! InterestingWordHighlights()
hi def InterestingWord1 guifg=#000000 ctermfg=16 guibg=#ffa724 ctermbg=214
hi def InterestingWord2 guifg=#000000 ctermfg=16 guibg=#aeee00 ctermbg=154
hi def InterestingWord3 guifg=#000000 ctermfg=16 guibg=#8cffba ctermbg=121
hi def InterestingWord4 guifg=#000000 ctermfg=16 guibg=#b88853 ctermbg=137
hi def InterestingWord5 guifg=#000000 ctermfg=16 guibg=#ff9eb8 ctermbg=211
hi def InterestingWord6 guifg=#000000 ctermfg=16 guibg=#ff2c4b ctermbg=195
endfunction
call InterestingWordHighlights()

" }}}
" ALE highlight colors{{{
function! ALEHighlightColors()
highlight ALEError term=bold,italic gui=bold,italic guibg=#bd1701
highlight ALEStyleError term=italic gui=italic guibg=#bd3601
highlight ALEWarning guibg=#bd7400
highlight ALEStyleWarning guibg=#ec7400
highlight ALEInfo guibg=#008900
endfunction
call ALEHighlightColors()
"}}}
"}}}
source ~/.local_vimrc

if exists("$EXTRA_VIM")
    for path in split($EXTRA_VIM, ':')
        exec "source " . path
    endfor
endif
